package com.axonactive.training.team;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.List;

import com.axonactive.training.company.Company;
import com.axonactive.training.player.Gender;
import com.axonactive.training.player.Player;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class TeamTest {
    
    private Company testCompany;
    private Team team;

    @BeforeEach
    public void init(){
        this.testCompany = new Company("Test Company");
        this.team = new Team("Test Team", this.testCompany);
    }

    @Test
    public void addPlayerwhenPlayerWorkAtThatCompanyThenItNotThing(){
        assertDoesNotThrow(()->this.team.addPlayer(new Player("Nhut Huy", Gender.MALE, this.testCompany)));
    }

    @Test
    public void addPlayerwhenPlayerNotWorkAtThatCompanyThenItThrowArithmeticException(){
        Company testCompany2 = new Company("Test");
        assertThrows(ArithmeticException.class, ()->this.team.addPlayer(new Player("Nhut Huy", Gender.MALE, testCompany2)));
    }

    @Test
    public void addPlayerwhenNumberOfPlayerLessThanTeamSizeThenItReturnTrue()
    {
        Player player1 = new Player("nhut huy",Gender.FEMALE,this.testCompany);
        this.team.addPlayer(player1);
        this.team.addPlayer(player1);
        assertDoesNotThrow(()->this.team.addPlayer(new Player("Nhut Huy", Gender.MALE, this.testCompany)));
    }

    @Test
    public void addPlayerwhenNumberOfPlayerMoreThanTeamSizeThenItReturnTrue()
    {
        Player player1 = new Player("nhut huy",Gender.FEMALE,this.testCompany);
        List<Player> players = new ArrayList<>();
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        players.add(player1);
        this.team.setPlayers(players);
        assertThrows(ArithmeticException.class, ()->this.team.addPlayer(new Player("Nhut Huy", Gender.MALE, this.testCompany)));
    }

    @Test
    public void whenGiveTrueSizeOfTeamThenItReturnTrueSize(){
        Player player1 = new Player("nhut huy",Gender.FEMALE,this.testCompany);
        this.team.addPlayer(player1);
        this.team.addPlayer(player1);
        assertEquals(2, this.team.getSize());
    }

    @Test
    public void whenGiveNullSizeOfTeamThenItReturnIllegalAccessError(){
        this.team.setPlayers(null);
        assertThrows(IllegalAccessError.class, ()->this.team.getSize());
    }
}
